From 35ce62474fa97a5460d72c360943700a413a07ae Mon Sep 17 00:00:00 2001
From: Alexander Larsson <alexl@redhat.com>
Date: Thu, 31 Aug 2017 12:03:37 +0900
Subject: [PATCH 12/33] Support the portal in the gtk im modules

This adds a new way to create an IbusBus, ibus_bus_new_async_client().
This returns an object that is not guarantee to handle any calls
that are not needed by a client, meaning CreateInputContext and
handling the input context.

If you are running in a flatpak, or if IBUS_USE_PORTAL is set, then
instead of talking to the regular ibus bus we connect to
org.freedesktop.portal.IBus on the session bus and use the
limited org.freedesktop.IBus.Portal interface instead of the
org.freedesktop.IBus interface.

This allows flatpaks (or other sandbox systems) to safely use
dbus clients (apps).

BUG=https://github.com/flatpak/flatpak/issues/675

Review URL: https://codereview.appspot.com/328410043

Patch from Alexander Larsson <alexl@redhat.com>.
---
 client/gtk2/ibusimcontext.c |   4 +-
 src/ibusbus.c               | 248 +++++++++++++++++++++++++++++++++++++++-----
 src/ibusbus.h               |  23 ++++
 src/ibusinputcontext.c      |  12 ++-
 4 files changed, 256 insertions(+), 31 deletions(-)

diff --git a/client/gtk2/ibusimcontext.c b/client/gtk2/ibusimcontext.c
index 41c7a3af..b4ca8828 100644
--- a/client/gtk2/ibusimcontext.c
+++ b/client/gtk2/ibusimcontext.c
@@ -583,7 +583,7 @@ ibus_im_context_class_init (IBusIMContextClass *class)
 
     /* init bus object */
     if (_bus == NULL) {
-        _bus = ibus_bus_new_async ();
+        _bus = ibus_bus_new_async_client ();
 
         /* init the global fake context */
         if (ibus_bus_is_connected (_bus)) {
@@ -603,7 +603,7 @@ ibus_im_context_class_init (IBusIMContextClass *class)
     }
 
     _daemon_name_watch_id = g_bus_watch_name (G_BUS_TYPE_SESSION,
-                                              IBUS_SERVICE_IBUS,
+                                              ibus_bus_get_service_name (_bus),
                                               G_BUS_NAME_WATCHER_FLAGS_NONE,
                                               daemon_name_appeared,
                                               daemon_name_vanished,
diff --git a/src/ibusbus.c b/src/ibusbus.c
index 75406a37..fc0c9033 100644
--- a/src/ibusbus.c
+++ b/src/ibusbus.c
@@ -48,12 +48,14 @@ enum {
 enum {
     PROP_0 = 0,
     PROP_CONNECT_ASYNC,
+    PROP_CLIENT_ONLY,
 };
 
 /* IBusBusPriv */
 struct _IBusBusPrivate {
     GFileMonitor *monitor;
     GDBusConnection *connection;
+    gboolean connected;
     gboolean watch_dbus_signal;
     guint watch_dbus_signal_id;
     gboolean watch_ibus_signal;
@@ -62,7 +64,10 @@ struct _IBusBusPrivate {
     gchar *unique_name;
     gboolean connect_async;
     gchar *bus_address;
+    gboolean use_portal;
+    gboolean client_only;
     GCancellable *cancellable;
+    guint portal_name_watch_id;
 };
 
 static guint    bus_signals[LAST_SIGNAL] = { 0 };
@@ -74,6 +79,7 @@ static GObject  *ibus_bus_constructor           (GType                   type,
                                                  guint                   n_params,
                                                  GObjectConstructParam  *params);
 static void      ibus_bus_destroy               (IBusObject             *object);
+static void      ibus_bus_connect_async         (IBusBus                *bus);
 static void      ibus_bus_watch_dbus_signal     (IBusBus                *bus);
 static void      ibus_bus_unwatch_dbus_signal   (IBusBus                *bus);
 static void      ibus_bus_watch_ibus_signal     (IBusBus                *bus);
@@ -117,8 +123,10 @@ ibus_bus_class_init (IBusBusClass *class)
     IBusObjectClass *ibus_object_class = IBUS_OBJECT_CLASS (class);
 
     gobject_class->constructor = ibus_bus_constructor;
-    gobject_class->set_property = (GObjectSetPropertyFunc) ibus_bus_set_property;
-    gobject_class->get_property = (GObjectGetPropertyFunc) ibus_bus_get_property;
+    gobject_class->set_property =
+            (GObjectSetPropertyFunc) ibus_bus_set_property;
+    gobject_class->get_property =
+            (GObjectGetPropertyFunc) ibus_bus_get_property;
     ibus_object_class->destroy = ibus_bus_destroy;
 
     /* install properties */
@@ -128,13 +136,28 @@ ibus_bus_class_init (IBusBusClass *class)
      * Whether the #IBusBus object should connect asynchronously to the bus.
      *
      */
-    g_object_class_install_property (gobject_class,
-                                     PROP_CONNECT_ASYNC,
-                                     g_param_spec_boolean ("connect-async",
-                                                           "Connect Async",
-                                                           "Connect asynchronously to the bus",
-                                                           FALSE,
-                                                           G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
+    g_object_class_install_property (
+            gobject_class,
+            PROP_CONNECT_ASYNC,
+            g_param_spec_boolean ("connect-async",
+                                  "Connect Async",
+                                  "Connect asynchronously to the bus",
+                                  FALSE,
+                                  G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
+    /**
+     * IBusBus:client-only:
+     *
+     * Whether the #IBusBus object is for client use only.
+     *
+     */
+    g_object_class_install_property (
+            gobject_class,
+            PROP_CLIENT_ONLY,
+            g_param_spec_boolean ("client-only",
+                                  "ClientOnly",
+                                  "Client use only",
+                                  FALSE,
+                                  G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
 
     /* install signals */
     /**
@@ -294,6 +317,8 @@ ibus_bus_close_connection (IBusBus *bus)
     g_cancellable_cancel (bus->priv->cancellable);
     g_cancellable_reset (bus->priv->cancellable);
 
+    bus->priv->connected = FALSE;
+
     /* unref the old connection at first */
     if (bus->priv->connection != NULL) {
         g_signal_handlers_disconnect_by_func (bus->priv->connection,
@@ -311,6 +336,8 @@ static void
 ibus_bus_connect_completed (IBusBus *bus)
 {
     g_assert (bus->priv->connection);
+
+    bus->priv->connected = TRUE;
     /* FIXME */
     ibus_bus_hello (bus);
 
@@ -328,10 +355,39 @@ ibus_bus_connect_completed (IBusBus *bus)
     g_signal_emit (bus, bus_signals[CONNECTED], 0);
 }
 
+static void
+_bus_connect_start_portal_cb (GObject      *source_object,
+                              GAsyncResult *res,
+                              gpointer      user_data)
+{
+    IBusBus *bus = IBUS_BUS (user_data);
+    GVariant *result;
+    GError *error = NULL;
+
+    result = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
+                                            res,
+                                            &error);
+    if (result != NULL) {
+        ibus_bus_connect_completed (bus);
+        g_variant_unref (result);
+    } else {
+        g_error_free (error);
+
+        g_dbus_connection_close (bus->priv->connection, NULL, NULL, NULL);
+        g_object_unref (bus->priv->connection);
+        bus->priv->connection = NULL;
+
+        g_free (bus->priv->bus_address);
+        bus->priv->bus_address = NULL;
+    }
+
+    g_object_unref (bus);
+}
+
 static void
 _bus_connect_async_cb (GObject      *source_object,
-                        GAsyncResult *res,
-                        gpointer      user_data)
+                       GAsyncResult *res,
+                       gpointer      user_data)
 {
     g_return_if_fail (user_data != NULL);
     g_return_if_fail (IBUS_IS_BUS (user_data));
@@ -349,7 +405,26 @@ _bus_connect_async_cb (GObject      *source_object,
     }
 
     if (bus->priv->connection != NULL) {
-        ibus_bus_connect_completed (bus);
+        if (bus->priv->use_portal) {
+            g_object_set_data (G_OBJECT (bus->priv->connection),
+                               "ibus-portal-connection",
+                               GINT_TO_POINTER (TRUE));
+            g_dbus_connection_call (
+                    bus->priv->connection,
+                    IBUS_SERVICE_PORTAL,
+                    IBUS_PATH_IBUS,
+                    "org.freedesktop.DBus.Peer",
+                    "Ping",
+                    g_variant_new ("()"),
+                    G_VARIANT_TYPE ("()"),
+                    G_DBUS_CALL_FLAGS_NONE,
+                    -1,
+                    bus->priv->cancellable,
+                    (GAsyncReadyCallback) _bus_connect_start_portal_cb,
+                    g_object_ref (bus));
+        } else {
+            ibus_bus_connect_completed (bus);
+        }
     }
     else {
         g_free (bus->priv->bus_address);
@@ -360,21 +435,32 @@ _bus_connect_async_cb (GObject      *source_object,
     g_object_unref (bus);
 }
 
+static gchar *
+ibus_bus_get_bus_address (IBusBus *bus)
+{
+    if (_bus->priv->use_portal)
+        return g_dbus_address_get_for_bus_sync (G_BUS_TYPE_SESSION, NULL, NULL);
+    else
+        return g_strdup (ibus_get_address ());
+}
+
 static void
 ibus_bus_connect_async (IBusBus *bus)
 {
-    const gchar *bus_address = ibus_get_address ();
+    gchar *bus_address = ibus_bus_get_bus_address (bus);
 
     if (bus_address == NULL)
         return;
 
-    if (g_strcmp0 (bus->priv->bus_address, bus_address) == 0)
+    if (g_strcmp0 (bus->priv->bus_address, bus_address) == 0) {
+        g_free (bus_address);
         return;
+    }
 
     /* Close current connection and cancel ongoing connect request. */
     ibus_bus_close_connection (bus);
 
-    bus->priv->bus_address = g_strdup (bus_address);
+    bus->priv->bus_address = bus_address;
     g_object_ref (bus);
     g_dbus_connection_new_for_address (
             bus_address,
@@ -385,6 +471,28 @@ ibus_bus_connect_async (IBusBus *bus)
             _bus_connect_async_cb, bus);
 }
 
+static gboolean
+is_in_flatpak (void)
+{
+    static gboolean flatpak_info_read;
+    static gboolean in_flatpak;
+
+    if (flatpak_info_read)
+        return in_flatpak;
+
+    flatpak_info_read = TRUE;
+    if (g_file_test ("/.flatpak-info", G_FILE_TEST_EXISTS))
+        in_flatpak = TRUE;
+    return in_flatpak;
+}
+
+static gboolean
+ibus_bus_should_connect_portal (IBusBus *bus)
+{
+    return bus->priv->client_only &&
+        (is_in_flatpak () || g_getenv ("IBUS_USE_PORTAL") != NULL);
+}
+
 static void
 ibus_bus_connect (IBusBus *bus)
 {
@@ -431,7 +539,6 @@ ibus_bus_init (IBusBus *bus)
 {
     struct stat buf;
     gchar *path;
-    GFile *file;
 
     bus->priv = IBUS_BUS_GET_PRIVATE (bus);
 
@@ -443,6 +550,7 @@ ibus_bus_init (IBusBus *bus)
     bus->priv->watch_ibus_signal_id = 0;
     bus->priv->unique_name = NULL;
     bus->priv->connect_async = FALSE;
+    bus->priv->client_only = FALSE;
     bus->priv->bus_address = NULL;
     bus->priv->cancellable = g_cancellable_new ();
 
@@ -453,17 +561,12 @@ ibus_bus_init (IBusBus *bus)
 
     if (stat (path, &buf) == 0) {
         if (buf.st_uid != getuid ()) {
-            g_warning ("The owner of %s is not %s!", path, ibus_get_user_name ());
+            g_warning ("The owner of %s is not %s!",
+                       path, ibus_get_user_name ());
             return;
         }
     }
 
-    file = g_file_new_for_path (ibus_get_socket_path ());
-    bus->priv->monitor = g_file_monitor_file (file, 0, NULL, NULL);
-
-    g_signal_connect (bus->priv->monitor, "changed", (GCallback) _changed_cb, bus);
-
-    g_object_unref (file);
     g_free (path);
 }
 
@@ -477,6 +580,9 @@ ibus_bus_set_property (IBusBus      *bus,
     case PROP_CONNECT_ASYNC:
         bus->priv->connect_async = g_value_get_boolean (value);
         break;
+    case PROP_CLIENT_ONLY:
+        bus->priv->client_only = g_value_get_boolean (value);
+        break;
     default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (bus, prop_id, pspec);
     }
@@ -492,25 +598,73 @@ ibus_bus_get_property (IBusBus    *bus,
     case PROP_CONNECT_ASYNC:
         g_value_set_boolean (value, bus->priv->connect_async);
         break;
+    case PROP_CLIENT_ONLY:
+        g_value_set_boolean (value, bus->priv->client_only);
+        break;
     default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (bus, prop_id, pspec);
     }
 }
 
+static void
+portal_name_appeared (GDBusConnection *connection,
+                      const gchar     *name,
+                      const gchar     *owner,
+                      gpointer         user_data)
+{
+    IBusBus *bus = IBUS_BUS (user_data);
+
+    if (bus->priv->connection == NULL)
+        ibus_bus_connect_async (bus);
+}
+
+static void
+portal_name_vanished (GDBusConnection *connection,
+                      const gchar     *name,
+                      gpointer         user_data)
+{
+    IBusBus *bus = IBUS_BUS (user_data);
+
+    if (bus->priv->connection)
+        g_dbus_connection_close (bus->priv->connection, NULL, NULL, NULL);
+}
+
+
 static GObject*
 ibus_bus_constructor (GType                  type,
                       guint                  n_params,
                       GObjectConstructParam *params)
 {
     GObject *object;
+    GFile *file;
 
     /* share one IBusBus instance in whole application */
     if (_bus == NULL) {
-        object = G_OBJECT_CLASS (ibus_bus_parent_class)->constructor (type, n_params, params);
+        object = G_OBJECT_CLASS (ibus_bus_parent_class)->constructor (
+                type, n_params, params);
         /* make bus object sink */
         g_object_ref_sink (object);
         _bus = IBUS_BUS (object);
 
+        _bus->priv->use_portal = ibus_bus_should_connect_portal (_bus);
+
+        if (!_bus->priv->use_portal) {
+            file = g_file_new_for_path (ibus_get_socket_path ());
+            _bus->priv->monitor = g_file_monitor_file (file, 0, NULL, NULL);
+            g_signal_connect (_bus->priv->monitor, "changed",
+                              (GCallback) _changed_cb, _bus);
+            g_object_unref (file);
+        } else {
+            _bus->priv->portal_name_watch_id =
+                g_bus_watch_name (G_BUS_TYPE_SESSION,
+                                  IBUS_SERVICE_PORTAL,
+                                  G_BUS_NAME_WATCHER_FLAGS_NONE,
+                                  portal_name_appeared,
+                                  portal_name_vanished,
+                                  _bus, NULL);
+        }
+
+
         if (_bus->priv->connect_async)
             ibus_bus_connect_async (_bus);
         else
@@ -561,6 +715,11 @@ ibus_bus_destroy (IBusObject *object)
     g_object_unref (bus->priv->cancellable);
     bus->priv->cancellable = NULL;
 
+    if (bus->priv->portal_name_watch_id) {
+        g_bus_unwatch_name (bus->priv->portal_name_watch_id);
+        bus->priv->portal_name_watch_id = 0;
+    }
+
     IBUS_OBJECT_CLASS (ibus_bus_parent_class)->destroy (object);
 }
 
@@ -656,6 +815,7 @@ ibus_bus_new (void)
 {
     IBusBus *bus = IBUS_BUS (g_object_new (IBUS_TYPE_BUS,
                                            "connect-async", FALSE,
+                                           "client-only", FALSE,
                                            NULL));
 
     return bus;
@@ -666,6 +826,18 @@ ibus_bus_new_async (void)
 {
     IBusBus *bus = IBUS_BUS (g_object_new (IBUS_TYPE_BUS,
                                            "connect-async", TRUE,
+                                           "client-only", FALSE,
+                                           NULL));
+
+    return bus;
+}
+
+IBusBus *
+ibus_bus_new_async_client (void)
+{
+    IBusBus *bus = IBUS_BUS (g_object_new (IBUS_TYPE_BUS,
+                                           "connect-async", TRUE,
+                                           "client-only", TRUE,
                                            NULL));
 
     return bus;
@@ -679,7 +851,7 @@ ibus_bus_is_connected (IBusBus *bus)
     if (bus->priv->connection == NULL || g_dbus_connection_is_closed (bus->priv->connection))
         return FALSE;
 
-    return TRUE;
+    return bus->priv->connected;
 }
 
 IBusInputContext *
@@ -795,9 +967,9 @@ ibus_bus_create_input_context_async (IBusBus            *bus,
      * 2. New local IBusInputContext proxy of the remote IC
      */
     g_dbus_connection_call (bus->priv->connection,
-            IBUS_SERVICE_IBUS,
+            ibus_bus_get_service_name (bus),
             IBUS_PATH_IBUS,
-            IBUS_INTERFACE_IBUS,
+            bus->priv->use_portal ? IBUS_INTERFACE_PORTAL : IBUS_INTERFACE_IBUS,
             "CreateInputContext",
             g_variant_new ("(s)", client_name),
             G_VARIANT_TYPE("(o)"),
@@ -1454,6 +1626,14 @@ ibus_bus_get_connection (IBusBus *bus)
     return bus->priv->connection;
 }
 
+const gchar *
+ibus_bus_get_service_name (IBusBus *bus)
+{
+    if (bus->priv->use_portal)
+        return IBUS_SERVICE_PORTAL;
+    return IBUS_SERVICE_IBUS;
+}
+
 gboolean
 ibus_bus_exit (IBusBus *bus,
                gboolean restart)
@@ -2369,6 +2549,13 @@ ibus_bus_call_sync (IBusBus            *bus,
     g_assert (member != NULL);
     g_return_val_if_fail (ibus_bus_is_connected (bus), NULL);
 
+    if (bus->priv->use_portal &&
+        g_strcmp0 (bus_name, IBUS_SERVICE_IBUS) == 0)  {
+        bus_name = IBUS_SERVICE_PORTAL;
+        if (g_strcmp0 (interface, IBUS_INTERFACE_IBUS) == 0)
+            interface = IBUS_INTERFACE_PORTAL;
+    }
+
     GError *error = NULL;
     GVariant *result;
     result = g_dbus_connection_call_sync (bus->priv->connection,
@@ -2436,6 +2623,13 @@ ibus_bus_call_async (IBusBus            *bus,
     task = g_task_new (bus, cancellable, callback, user_data);
     g_task_set_source_tag (task, source_tag);
 
+    if (bus->priv->use_portal &&
+        g_strcmp0 (bus_name, IBUS_SERVICE_IBUS) == 0)  {
+        bus_name = IBUS_SERVICE_PORTAL;
+        if (g_strcmp0 (interface, IBUS_INTERFACE_IBUS) == 0)
+            interface = IBUS_INTERFACE_PORTAL;
+    }
+
     g_dbus_connection_call (bus->priv->connection,
                             bus_name,
                             path,
diff --git a/src/ibusbus.h b/src/ibusbus.h
index 9f65d36a..dff3dfb7 100644
--- a/src/ibusbus.h
+++ b/src/ibusbus.h
@@ -105,6 +105,19 @@ IBusBus     *ibus_bus_new               (void);
  */
 IBusBus     *ibus_bus_new_async         (void);
 
+/**
+ * ibus_bus_new_async_client:
+ *
+ * Creates a new #IBusBus instance for client use only. It will possibly
+ * be limited in what it can do.
+ *
+ * The instance will asynchronously connect to the IBus daemon.
+ *
+ * Returns: A newly allocated #IBusBus instance, and the instance is not
+ * floating.
+ */
+IBusBus     *ibus_bus_new_async_client  (void);
+
 
 /**
  * ibus_bus_is_connected:
@@ -127,6 +140,16 @@ gboolean     ibus_bus_is_connected      (IBusBus        *bus);
 GDBusConnection *
              ibus_bus_get_connection    (IBusBus        *bus);
 
+/**
+ * ibus_bus_get_service_name:
+ * @bus: An #IBusBus.
+ *
+ * Return the main service name to use for calls on the ibus connection.
+ *
+ * Returns: at dbus name.
+ */
+const gchar * ibus_bus_get_service_name (IBusBus        *bus);
+
 /**
  * ibus_bus_hello:
  * @bus: An #IBusBus.
diff --git a/src/ibusinputcontext.c b/src/ibusinputcontext.c
index 9a50acc0..ae7048ad 100644
--- a/src/ibusinputcontext.c
+++ b/src/ibusinputcontext.c
@@ -684,16 +684,20 @@ ibus_input_context_new (const gchar     *path,
 {
     g_assert (path != NULL);
     g_assert (G_IS_DBUS_CONNECTION (connection));
+    const gchar *service_name = IBUS_SERVICE_IBUS;
 
     GInitable *initable;
 
     GDBusProxyFlags flags = G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START;
 
+    if (g_object_get_data (G_OBJECT (connection), "ibus-portal-connection"))
+        service_name = IBUS_SERVICE_PORTAL;
+
     initable = g_initable_new (IBUS_TYPE_INPUT_CONTEXT,
                                cancellable,
                                error,
                                "g-connection",      connection,
-                               "g-name",            IBUS_SERVICE_IBUS,
+                               "g-name",            service_name,
                                "g-flags",           flags,
                                "g-interface-name",  IBUS_INTERFACE_INPUT_CONTEXT,
                                "g-object-path",     path,
@@ -714,16 +718,20 @@ ibus_input_context_new_async (const gchar         *path,
     g_assert (path != NULL);
     g_assert (G_IS_DBUS_CONNECTION (connection));
     g_assert (callback != NULL);
+    const gchar *service_name = IBUS_SERVICE_IBUS;
 
     GDBusProxyFlags flags = G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START;
 
+    if (g_object_get_data (G_OBJECT (connection), "ibus-portal-connection"))
+        service_name = IBUS_SERVICE_PORTAL;
+
     g_async_initable_new_async (IBUS_TYPE_INPUT_CONTEXT,
                                 G_PRIORITY_DEFAULT,
                                 cancellable,
                                 callback,
                                 user_data,
                                 "g-connection",      connection,
-                                "g-name",            IBUS_SERVICE_IBUS,
+                                "g-name",            service_name,
                                 "g-flags",           flags,
                                 "g-interface-name",  IBUS_INTERFACE_INPUT_CONTEXT,
                                 "g-object-path",     path,
-- 
2.15.1

