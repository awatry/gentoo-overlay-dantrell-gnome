From bbfb3d738b9d61d1eb0658a9ce56e3cd8c111ac4 Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Wed, 6 Sep 2017 14:08:40 +0900
Subject: [PATCH 18/33] client/gtk2: Do not send key events to
 GtkIMContextSimple

GtkIMContextSimple binds Ctrl-Shift-u but IBus clients do not now.

BUG=https://github.com/ibus/ibus/issues/1889
R=Shawn.P.Huang@gmail.com

Review URL: https://codereview.appspot.com/327290043
---
 client/gtk2/ibusimcontext.c | 41 +++++++++++++++++++++++++++++++++++++++--
 src/ibusenginesimple.c      | 23 ++---------------------
 src/ibusenginesimple.h      | 24 ++++++++++++++++++++++--
 3 files changed, 63 insertions(+), 25 deletions(-)

diff --git a/client/gtk2/ibusimcontext.c b/client/gtk2/ibusimcontext.c
index b4ca8828..3ea46951 100644
--- a/client/gtk2/ibusimcontext.c
+++ b/client/gtk2/ibusimcontext.c
@@ -2,7 +2,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2013 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2013 Red Hat, Inc.
+ * Copyright (C) 2015-2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2017 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -247,6 +248,39 @@ _focus_out_cb (GtkWidget     *widget,
     return FALSE;
 }
 
+static gboolean
+ibus_im_context_commit_event (IBusIMContext *ibusimcontext,
+                              GdkEventKey   *event)
+{
+    int i;
+    GdkModifierType no_text_input_mask;
+    gunichar ch;
+
+    if (event->type == GDK_KEY_RELEASE)
+        return FALSE;
+    /* Ignore modifier key presses */
+    for (i = 0; i < G_N_ELEMENTS (IBUS_COMPOSE_IGNORE_KEYLIST); i++)
+        if (event->keyval == IBUS_COMPOSE_IGNORE_KEYLIST[i])
+            return FALSE;
+    no_text_input_mask = gdk_keymap_get_modifier_mask (
+            gdk_keymap_get_for_display (gdk_display_get_default ()),
+            GDK_MODIFIER_INTENT_NO_TEXT_INPUT);
+    if (event->state & no_text_input_mask ||
+        event->keyval == GDK_KEY_Return ||
+        event->keyval == GDK_KEY_ISO_Enter ||
+        event->keyval == GDK_KEY_KP_Enter) {
+        return FALSE;
+    }
+    ch = ibus_keyval_to_unicode (event->keyval);
+    if (ch != 0 && !g_unichar_iscntrl (ch)) {
+        IBusText *text = ibus_text_new_from_unichar (ch);
+        g_signal_emit (ibusimcontext, _signal_commit_id, 0, text->text);
+        g_object_unref (text);
+        return TRUE;
+    }
+   return FALSE;
+}
+
 static void
 _process_key_event_done (GObject      *object,
                          GAsyncResult *res,
@@ -797,8 +831,11 @@ ibus_im_context_filter_keypress (GtkIMContext *context,
     if (event->state & IBUS_HANDLED_MASK)
         return TRUE;
 
+    /* Do not call gtk_im_context_filter_keypress() because
+     * gtk_im_context_simple_filter_keypress() binds Ctrl-Shift-u
+     */
     if (event->state & IBUS_IGNORED_MASK)
-        return gtk_im_context_filter_keypress (ibusimcontext->slave, event);
+        return ibus_im_context_commit_event (ibusimcontext, event);
 
     /* XXX it is a workaround for some applications do not set client
      * window. */
diff --git a/src/ibusenginesimple.c b/src/ibusenginesimple.c
index cddd932c..63785223 100644
--- a/src/ibusenginesimple.c
+++ b/src/ibusenginesimple.c
@@ -81,25 +81,6 @@ const IBusComposeTableCompact ibus_compose_table_compact = {
 
 static GSList *global_tables;
 
-static const guint16 ibus_compose_ignore[] = {
-    IBUS_KEY_Shift_L,
-    IBUS_KEY_Shift_R,
-    IBUS_KEY_Control_L,
-    IBUS_KEY_Control_R,
-    IBUS_KEY_Caps_Lock,
-    IBUS_KEY_Shift_Lock,
-    IBUS_KEY_Meta_L,
-    IBUS_KEY_Meta_R,
-    IBUS_KEY_Alt_L,
-    IBUS_KEY_Alt_R,
-    IBUS_KEY_Super_L,
-    IBUS_KEY_Super_R,
-    IBUS_KEY_Hyper_L,
-    IBUS_KEY_Hyper_R,
-    IBUS_KEY_Mode_switch,
-    IBUS_KEY_ISO_Level3_Shift
-};
-
 /* functions prototype */
 static void     ibus_engine_simple_destroy      (IBusEngineSimple   *simple);
 static void     ibus_engine_simple_reset        (IBusEngine         *engine);
@@ -1045,8 +1026,8 @@ ibus_engine_simple_process_key_event (IBusEngine *engine,
     }
 
     /* Ignore modifier key presses */
-    for (i = 0; i < G_N_ELEMENTS (ibus_compose_ignore); i++)
-        if (keyval == ibus_compose_ignore[i])
+    for (i = 0; i < G_N_ELEMENTS (IBUS_COMPOSE_IGNORE_KEYLIST); i++)
+        if (keyval == IBUS_COMPOSE_IGNORE_KEYLIST[i])
             return FALSE;
 
     if ((priv->in_hex_sequence || priv->in_emoji_sequence)
diff --git a/src/ibusenginesimple.h b/src/ibusenginesimple.h
index 8712659c..a5ef34fb 100644
--- a/src/ibusenginesimple.h
+++ b/src/ibusenginesimple.h
@@ -2,8 +2,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2015 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2015-2016 Takao Fujiwara <takao.fujiwara1@gmail.com>
- * Copyright (C) 2008-2016 Red Hat, Inc.
+ * Copyright (C) 2015-2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2017 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -40,6 +40,7 @@
  */
 
 #include "ibusengine.h"
+#include "ibuskeysyms.h"
 
 G_BEGIN_DECLS
 
@@ -94,6 +95,25 @@ struct _IBusEngineSimpleClass {
     gpointer pdummy[8];
 };
 
+static const guint16 IBUS_COMPOSE_IGNORE_KEYLIST[] = {
+    IBUS_KEY_Shift_L,
+    IBUS_KEY_Shift_R,
+    IBUS_KEY_Control_L,
+    IBUS_KEY_Control_R,
+    IBUS_KEY_Caps_Lock,
+    IBUS_KEY_Shift_Lock,
+    IBUS_KEY_Meta_L,
+    IBUS_KEY_Meta_R,
+    IBUS_KEY_Alt_L,
+    IBUS_KEY_Alt_R,
+    IBUS_KEY_Super_L,
+    IBUS_KEY_Super_R,
+    IBUS_KEY_Hyper_L,
+    IBUS_KEY_Hyper_R,
+    IBUS_KEY_Mode_switch,
+    IBUS_KEY_ISO_Level3_Shift
+};
+
 GType   ibus_engine_simple_get_type       (void);
 
 /**
-- 
2.15.1

