diff '--exclude=.git' -urN a/config.h.in b/config.h.in
--- a/config.h.in	2018-09-22 04:01:49.000000000 -0500
+++ b/config.h.in	2018-12-07 16:43:40.497108623 -0600
@@ -122,8 +122,8 @@
 /* Define if you want systemd journal support */
 #undef WITH_SYSTEMD_JOURNAL
 
-/* Define if you have systemd suspend-resume support */
-#undef WITH_SYSTEMD_SUSPEND_RESUME
+/* Define if you have suspend-resume support */
+#undef WITH_SUSPEND_RESUME
 
 /* Define if you want udev support */
 #undef WITH_UDEV
diff '--exclude=.git' -urN a/configure.ac b/configure.ac
--- a/configure.ac	2018-09-22 04:01:11.000000000 -0500
+++ b/configure.ac	2018-12-07 16:40:58.977949739 -0600
@@ -208,34 +208,31 @@
 dnl Suspend/resume support
 dnl
 
-PKG_CHECK_MODULES(LIBSYSTEMD, [libsystemd >= 209],[have_libsystemd=yes],[have_libsystemd=no])
-PKG_CHECK_MODULES(LIBSYSTEMD_LOGIN, [libsystemd-login >= 183],[have_libsystemd_login=yes],[have_libsystemd_login=no])
-AC_ARG_WITH(systemd-suspend-resume,
-            AS_HELP_STRING([--with-systemd-suspend-resume=no|yes],
-                           [Enable systemd suspend/resume support [[default=auto]]]),,
-            [with_systemd_suspend_resume=auto])
-
-if test "x$with_systemd_suspend_resume" = "xauto"; then
-    if test "x$have_libsystemd" = "xyes" || test "x$have_libsystemd_login" = "xyes"; then
-        with_systemd_suspend_resume=yes
-    else
-        with_systemd_suspend_resume=no
-    fi
+AC_ARG_WITH(suspend-resume, AS_HELP_STRING([--with-suspend-resume=no|upower|systemd], [Build ModemManager with specific suspend/resume support]))
+
+if test "x$with_suspend_resume" = "x"; then
+   with_suspend_resume="no"
 fi
 
-case $with_systemd_suspend_resume in
-    yes)
-        if test "x$have_libsystemd" = "xno" && test "x$have_libsystemd_login" = "xno"; then
-		    AC_MSG_ERROR(libsystemd or libsystemd-login development headers are required)
-	    fi
-        AC_DEFINE(WITH_SYSTEMD_SUSPEND_RESUME, 1, [Define if you have systemd suspend-resume support])
+case $with_suspend_resume in
+    no)
+        AC_DEFINE(WITH_SUSPEND_RESUME, 0, [Define if you have no suspend-resume support])
+        ;;
+    upower)
+        AC_DEFINE(WITH_SUSPEND_RESUME, 1, [Define if you have upower suspend-resume support])
+        ;;
+    systemd)
+        PKG_CHECK_MODULES(SYSTEMD_INHIBIT, [libsystemd >= 209],,
+                          [PKG_CHECK_MODULES(SYSTEMD_INHIBIT, [libsystemd-login >= 183])])
+        AC_DEFINE(WITH_SUSPEND_RESUME, 1, [Define if you have systemd suspend-resume support])
         ;;
     *)
-        with_systemd_suspend_resume=no
+        AC_MSG_ERROR(--with-suspend-resume must be one of [no, upower, systemd])
         ;;
 esac
 
-AM_CONDITIONAL(WITH_SYSTEMD_SUSPEND_RESUME, test "x$with_systemd_suspend_resume" = "xyes")
+AM_CONDITIONAL(SUSPEND_RESUME_UPOWER,  test "x$with_suspend_resume" = "xupower")
+AM_CONDITIONAL(SUSPEND_RESUME_SYSTEMD, test "x$with_suspend_resume" = "xsystemd")
 
 dnl-----------------------------------------------------------------------------
 dnl systemd journal support
@@ -447,7 +444,7 @@
       policykit:               ${with_polkit}
       mbim:                    ${with_mbim}
       qmi:                     ${with_qmi}
-      systemd suspend/resume:  ${with_systemd_suspend_resume}
+      suspend/resume:          ${with_suspend_resume}
       systemd journal:         ${with_systemd_journal}
 
     Miscellaneous:
diff '--exclude=.git' -urN a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2018-09-22 02:25:43.000000000 -0500
+++ b/src/Makefile.am	2018-12-07 16:42:11.043574218 -0600
@@ -359,10 +359,15 @@
 endif
 
 # Additional suspend/resume support via systemd
-if WITH_SYSTEMD_SUSPEND_RESUME
+if SUSPEND_RESUME_SYSTEMD
 ModemManager_SOURCES += mm-sleep-monitor.h mm-sleep-monitor.c
 endif
 
+# Additional suspend/resume support via upower
+if SUSPEND_RESUME_UPOWER
+ModemManager_SOURCES += mm-sleep-monitor.h mm-sleep-monitor-upower.c
+endif
+
 # Additional QMI support in ModemManager
 if WITH_QMI
 ModemManager_SOURCES += \
diff '--exclude=.git' -urN a/src/main.c b/src/main.c
--- a/src/main.c	2018-09-22 02:25:43.000000000 -0500
+++ b/src/main.c	2018-12-07 16:41:38.094745866 -0600
@@ -30,7 +30,7 @@
 #include "mm-log.h"
 #include "mm-context.h"
 
-#if defined WITH_SYSTEMD_SUSPEND_RESUME
+#if WITH_SUSPEND_RESUME
 # include "mm-sleep-monitor.h"
 #endif
 
@@ -55,7 +55,7 @@
     return FALSE;
 }
 
-#if defined WITH_SYSTEMD_SUSPEND_RESUME
+#if WITH_SUSPEND_RESUME
 
 static void
 sleeping_cb (MMSleepMonitor *sleep_monitor)
@@ -166,7 +166,7 @@
                               name_lost_cb,
                               NULL,
                               NULL);
-#if defined WITH_SYSTEMD_SUSPEND_RESUME
+#if WITH_SUSPEND_RESUME
     {
         MMSleepMonitor *sleep_monitor;
 
diff '--exclude=.git' -urN a/src/mm-sleep-monitor-upower.c b/src/mm-sleep-monitor-upower.c
--- a/src/mm-sleep-monitor-upower.c	1969-12-31 18:00:00.000000000 -0600
+++ b/src/mm-sleep-monitor-upower.c	2018-12-07 13:22:31.091834688 -0600
@@ -0,0 +1,150 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * (C) Copyright 2012 Red Hat, Inc.
+ * Author: Matthias Clasen <mclasen@redhat.com>
+ *
+ * Port to GDBus:
+ * (C) Copyright 2015 Aleksander Morgado <aleksander@aleksander.es>
+ */
+
+#include "config.h"
+
+#include <errno.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <gio/gio.h>
+
+#include "mm-log.h"
+#include "mm-utils.h"
+#include "mm-sleep-monitor.h"
+
+#define UPOWER_NAME       "org.freedesktop.UPower"
+#define UPOWER_PATH       "/org/freedesktop/UPower"
+#define UPOWER_INTERFACE  "org.freedesktop.UPower"
+
+struct _MMSleepMonitor {
+    GObject parent_instance;
+
+    GDBusProxy *upower_proxy;
+};
+
+struct _MMSleepMonitorClass {
+    GObjectClass parent_class;
+
+    void (*sleeping) (MMSleepMonitor *monitor);
+    void (*resuming) (MMSleepMonitor *monitor);
+};
+
+
+enum {
+    SLEEPING,
+    RESUMING,
+    LAST_SIGNAL,
+};
+static guint signals[LAST_SIGNAL] = {0};
+
+G_DEFINE_TYPE (MMSleepMonitor, mm_sleep_monitor, G_TYPE_OBJECT);
+
+/********************************************************************/
+
+static void
+signal_cb (GDBusProxy  *proxy,
+           const gchar *sendername,
+           const gchar *signalname,
+           GVariant    *args,
+           gpointer     data)
+{
+    MMSleepMonitor *self = data;
+
+    if (strcmp (signalname, "Sleeping") == 0) {
+        mm_dbg ("[sleep-monitor] received UPower sleeping signal");
+        g_signal_emit (self, signals[SLEEPING], 0);
+    } else if (strcmp (signalname, "Resuming") == 0) {
+        mm_dbg ("[sleep-monitor] received UPower resuming signal");
+        g_signal_emit (self, signals[RESUMING], 0);
+    }
+}
+
+static void
+on_proxy_acquired (GObject *object,
+                   GAsyncResult *res,
+                   MMSleepMonitor *self)
+{
+    GError *error = NULL;
+
+    self->upower_proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
+    if (!self->upower_proxy) {
+        mm_warn ("[sleep-monitor] failed to acquire UPower proxy: %s", error->message);
+        g_clear_error (&error);
+        return;
+    }
+
+    g_signal_connect (self->upower_proxy, "g-signal", G_CALLBACK (signal_cb), self);
+}
+
+static void
+mm_sleep_monitor_init (MMSleepMonitor *self)
+{
+    g_dbus_proxy_new_for_bus (G_BUS_TYPE_SYSTEM,
+                              G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START |
+                              G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES,
+                              NULL,
+                              UPOWER_NAME, UPOWER_PATH, UPOWER_INTERFACE,
+                              NULL,
+                              (GAsyncReadyCallback) on_proxy_acquired, self);
+}
+
+static void
+finalize (GObject *object)
+{
+    MMSleepMonitor *self = MM_SLEEP_MONITOR (object);
+
+    if (self->upower_proxy)
+        g_object_unref (self->upower_proxy);
+
+    if (G_OBJECT_CLASS (mm_sleep_monitor_parent_class)->finalize != NULL)
+        G_OBJECT_CLASS (mm_sleep_monitor_parent_class)->finalize (object);
+}
+
+static void
+mm_sleep_monitor_class_init (MMSleepMonitorClass *klass)
+{
+    GObjectClass *gobject_class;
+
+    gobject_class = G_OBJECT_CLASS (klass);
+
+    gobject_class->finalize = finalize;
+
+    signals[SLEEPING] = g_signal_new (MM_SLEEP_MONITOR_SLEEPING,
+                                      MM_TYPE_SLEEP_MONITOR,
+                                      G_SIGNAL_RUN_LAST,
+                                      G_STRUCT_OFFSET (MMSleepMonitorClass, sleeping),
+                                      NULL,                   /* accumulator      */
+                                      NULL,                   /* accumulator data */
+                                      g_cclosure_marshal_VOID__VOID,
+                                      G_TYPE_NONE, 0);
+    signals[RESUMING] = g_signal_new (MM_SLEEP_MONITOR_RESUMING,
+                                      MM_TYPE_SLEEP_MONITOR,
+                                      G_SIGNAL_RUN_LAST,
+                                      G_STRUCT_OFFSET (MMSleepMonitorClass, resuming),
+                                      NULL,                   /* accumulator      */
+                                      NULL,                   /* accumulator data */
+                                      g_cclosure_marshal_VOID__VOID,
+                                      G_TYPE_NONE, 0);
+}
+
+MM_DEFINE_SINGLETON_GETTER (MMSleepMonitor, mm_sleep_monitor_get, MM_TYPE_SLEEP_MONITOR);
