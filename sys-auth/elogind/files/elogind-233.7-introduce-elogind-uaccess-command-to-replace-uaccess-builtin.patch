diff '--exclude=.git' -urN a/Makefile.am b/Makefile.am
--- a/Makefile.am	2017-09-25 05:52:49.000000000 -0400
+++ b/Makefile.am	2018-07-08 01:58:42.948362389 -0400
@@ -142,6 +142,7 @@
 	-DSYSTEMD_CGROUP_CONTROLLER_LEGACY=\"name=$(CGROUP_CONTROLLER)\" \
 	-DSYSTEMD_CGROUP_CONTROLLER_HYBRID=\"name=$(CGROUP_CONTROLLER)\" \
 	-DSYSTEMD_CGROUP_AGENT_PATH=\"$(rootlibexecdir)/elogind-cgroups-agent\" \
+	-DELOGIND_UACCESS_COMMAND_PATH=\"$(rootlibexecdir)/elogind-uaccess-command\" \
 	-DSYSTEMD_BINARY_PATH=\"$(rootlibexecdir)/elogind\" \
 	-DUDEVLIBEXECDIR=\"$(udevlibexecdir)\" \
 	-DPOLKIT_AGENT_BINARY_PATH=\"$(PKTTYAGENT)\" \
@@ -907,6 +908,17 @@
        libelogind-shared.la
 
 # ------------------------------------------------------------------------------
+rootlibexec_PROGRAMS += \
+       elogind-uaccess-command
+
+elogind_uaccess_command_SOURCES = \
+       src/uaccess-command/uaccess-command.c
+
+elogind_uaccess_command_LDADD = \
+       libelogind-core.la \
+       libelogind-shared.la
+
+# ------------------------------------------------------------------------------
 libelogind_internal_la_SOURCES = \
 	src/systemd/sd-bus.h \
 	src/systemd/sd-bus-protocol.h \
diff '--exclude=.git' -urN a/src/basic/login-util.h b/src/basic/login-util.h
--- a/src/basic/login-util.h	2017-09-25 05:52:49.000000000 -0400
+++ b/src/basic/login-util.h	2018-07-08 01:50:16.230753938 -0400
@@ -24,8 +24,6 @@
 
 bool session_id_valid(const char *id);
 
-#if 0 /// UNNEEDED by elogind
 static inline bool logind_running(void) {
         return access("/run/systemd/seats/", F_OK) >= 0;
 }
-#endif // 0
diff '--exclude=.git' -urN a/src/login/73-seat-late.rules.in b/src/login/73-seat-late.rules.in
--- a/src/login/73-seat-late.rules.in	2017-09-25 05:52:49.000000000 -0400
+++ b/src/login/73-seat-late.rules.in	2018-07-08 01:50:16.230753938 -0400
@@ -12,6 +12,6 @@
 
 ENV{ID_SEAT}!="", TAG+="$env{ID_SEAT}"
 
-TAG=="uaccess", ENV{MAJOR}!="", RUN{builtin}+="uaccess"
+TAG=="uaccess", ENV{MAJOR}!="", RUN{program}+="@rootlibexecdir@/elogind-uaccess-command %N $env{ID_SEAT}"
 
 LABEL="seat_late_end"
diff '--exclude=.git' -urN a/src/uaccess-command/uaccess-command.c b/src/uaccess-command/uaccess-command.c
--- a/src/uaccess-command/uaccess-command.c	1969-12-31 19:00:00.000000000 -0500
+++ b/src/uaccess-command/uaccess-command.c	2018-07-08 02:00:50.934754873 -0400
@@ -0,0 +1,98 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * manage device node user ACL
+ *
+ * Copyright 2010-2012 Kay Sievers <kay@vrfy.org>
+ * Copyright 2010 Lennart Poettering
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "sd-login.h"
+
+#include "login-util.h"
+#include "logind-acl.h"
+#include "util.h"
+
+/*
+ * Copy of builtin_uaccess() from
+ * systemd/src/udev/udev-builtin-uaccess.c
+ */
+static int dev_uaccess(const char *path, const char *seat) {
+        int r;
+        bool changed_acl = false;
+        uid_t uid;
+
+        umask(0022);
+
+        /* don't muck around with ACLs when the system is not running systemd */
+        if (!logind_running())
+                return 0;
+
+        if (!seat || !strlen(seat))
+                seat = "seat0";
+
+        r = sd_seat_get_active(seat, NULL, &uid);
+        if (IN_SET(r, -ENXIO, -ENODATA)) {
+                /* No active session on this seat */
+                r = 0;
+                goto finish;
+        } else if (r < 0) {
+                log_error("Failed to determine active user on seat %s.", seat);
+                goto finish;
+        }
+
+        r = devnode_acl(path, true, false, 0, true, uid);
+        if (r < 0) {
+                log_full_errno(r == -ENOENT ? LOG_DEBUG : LOG_ERR, r, "Failed to apply ACL on %s: %m", path);
+                goto finish;
+        }
+
+        changed_acl = true;
+        r = 0;
+
+finish:
+        if (path && !changed_acl) {
+                int k;
+
+                /* Better be safe than sorry and reset ACL */
+                k = devnode_acl(path, true, false, 0, false, 0);
+                if (k < 0) {
+                        log_full_errno(errno == ENOENT ? LOG_DEBUG : LOG_ERR, k, "Failed to apply ACL on %s: %m", path);
+                        if (r >= 0)
+                                r = k;
+                }
+        }
+
+        return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
+}
+
+int main(int argc, char *argv[]) {
+
+        if (argc < 2) {
+                printf("Usage: %s DEVPATH [SEAT]\n", argv[0]);
+                return 0;
+        }
+
+        elogind_set_program_name(argv[0]);
+        log_set_target(LOG_TARGET_AUTO);
+        log_parse_environment();
+        log_open();
+
+        return dev_uaccess(argv[1], argc > 2 ? argv[2] : NULL);
+}
