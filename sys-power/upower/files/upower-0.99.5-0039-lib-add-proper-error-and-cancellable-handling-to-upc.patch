From 932a6a39e35754be571e1274aec4730fd42dba13 Mon Sep 17 00:00:00 2001
From: Martin Pitt <martin.pitt@ubuntu.com>
Date: Wed, 18 May 2016 09:22:43 +0200
Subject: [PATCH 39/67] lib: Add proper error and cancellable handling to
 UpClient constructor

A GObject's _init() should never fail or block, but this is currently the case
as up_client_init() connects to upowerd on D-Bus. Convert this to the GInitable
interface and provide a new constructor up_client_new_full() which accepts a
GCancellable and GError, so that clients can do proper error handling
and reporting.

This changes up_client_new() to return NULL when connecting to upowerd fails.
This provides a more well-defined behaviour in this case as clients can check
for this and our methods stop segfaulting as they have checks like

   g_return_val_if_fail (UP_IS_CLIENT (client), ...)

Previously we returned a valid object, but trying to call any method on it
segfaulted due to the NULL D-Bus proxy, so client code had no chance to check
whether the UpClient object was really valid.

https://bugs.freedesktop.org/show_bug.cgi?id=95350
---

diff '--exclude=.git' -urN a/libupower-glib/up-client.c b/libupower-glib/up-client.c
--- a/libupower-glib/up-client.c	2017-02-25 22:47:24.010670394 -0500
+++ b/libupower-glib/up-client.c	2017-02-25 23:25:21.421753367 -0500
@@ -44,9 +44,10 @@
 #include "up-client-glue.h"
 #include "up-device.h"
 
-static void	up_client_class_init	(UpClientClass	*klass);
-static void	up_client_init		(UpClient	*client);
-static void	up_client_finalize	(GObject	*object);
+static void	up_client_class_init		(UpClientClass	*klass);
+static void	up_client_initable_iface_init	(GInitableIface *iface);
+static void	up_client_init			(UpClient	*client);
+static void	up_client_finalize		(GObject	*object);
 
 #define UP_CLIENT_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UP_TYPE_CLIENT, UpClientPrivate))
 
@@ -98,7 +99,8 @@
 static guint signals [UP_CLIENT_LAST_SIGNAL] = { 0 };
 static gpointer up_client_object = NULL;
 
-G_DEFINE_TYPE (UpClient, up_client, G_TYPE_OBJECT)
+G_DEFINE_TYPE_WITH_CODE (UpClient, up_client, G_TYPE_OBJECT,
+                         G_IMPLEMENT_INTERFACE(G_TYPE_INITABLE, up_client_initable_iface_init))
 
 /**
  * up_client_get_devices:
@@ -870,11 +872,12 @@
  * up_client_init:
  * @client: This class instance
  */
-static void
-up_client_init (UpClient *client)
+static gboolean
+up_client_initable_init (GInitable *initable, GCancellable *cancellable, GError **error)
 {
-	GError *error = NULL;
+	GError *old_error = NULL;
 
+	UpClient *client = UP_CLIENT (initable);
 	client->priv = UP_CLIENT_GET_PRIVATE (client);
 
 	/* connect to main interface */
@@ -882,20 +885,17 @@
 								     G_DBUS_PROXY_FLAGS_NONE,
 								     "org.freedesktop.UPower",
 								     "/org/freedesktop/UPower",
-								     NULL,
-								     &error);
-	if (client->priv->proxy == NULL) {
-		g_warning ("Couldn't connect to proxy: %s", error->message);
-		g_error_free (error);
-		return;
-	}
+								     cancellable,
+								     error);
+	if (client->priv->proxy == NULL)
+		return FALSE;
 
 #ifdef ENABLE_DEPRECATED
 	/* get on the bus */
-	client->priv->bus = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
+	client->priv->bus = dbus_g_bus_get (DBUS_BUS_SYSTEM, &old_error);
 	if (client->priv->bus == NULL) {
-		g_warning ("Couldn't connect to system bus: %s", error->message);
-		g_error_free (error);
+		g_warning ("Couldn't connect to system bus: %s", old_error->message);
+		g_error_free (old_error);
 		return;
 	}
 
@@ -905,8 +905,8 @@
 							 "/org/freedesktop/UPower",
 							 "org.freedesktop.UPower");
 	if (client->priv->old_proxy == NULL) {
-		g_warning ("Couldn't connect to proxy: %s", error->message);
-		g_error_free (error);
+		g_warning ("Couldn't connect to proxy: %s", old_error->message);
+		g_error_free (old_error);
 		return;
 	}
 
@@ -916,8 +916,8 @@
 							      "/org/freedesktop/UPower",
 							      "org.freedesktop.DBus.Properties");
 	if (client->priv->prop_proxy == NULL) {
-		g_warning ("Couldn't connect to proxy: %s", error->message);
-		g_error_free (error);
+		g_warning ("Couldn't connect to proxy: %s", old_error->message);
+		g_error_free (old_error);
 		return;
 	}
 
@@ -938,6 +938,22 @@
 	dbus_g_proxy_connect_signal (client->priv->old_proxy, "NotifyResume",
 				     G_CALLBACK (up_client_notify_resume_cb), client, NULL);
 #endif /* ENABLE_DEPRECATED */
+	return TRUE;
+}
+
+static void
+up_client_initable_iface_init (GInitableIface *iface)
+{
+	iface->init = up_client_initable_init;
+}
+
+/*
+ * up_client_init:
+ * @client: This class instance
+ */
+static void
+up_client_init (UpClient *client)
+{
 }
 
 /*
@@ -970,23 +986,52 @@
 }
 
 /**
- * up_client_new:
+ * up_client_new_full:
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL.
  *
- * Creates a new #UpClient object.
+ * Creates a new #UpClient object. If connecting to upowerd on D-Bus fails,
+ % this returns %NULL and sets @error.
  *
- * Return value: a new UpClient object.
+ * Return value: a new UpClient object, or %NULL on failure.
  *
- * Since: 0.9.0
+ * Since: 0.99.5
  **/
 UpClient *
-up_client_new (void)
+up_client_new_full (GCancellable *cancellable, GError **error)
 {
 	if (up_client_object != NULL) {
 		g_object_ref (up_client_object);
 	} else {
-		up_client_object = g_object_new (UP_TYPE_CLIENT, NULL);
-		g_object_add_weak_pointer (up_client_object, &up_client_object);
+		up_client_object = g_initable_new (UP_TYPE_CLIENT, cancellable, error, NULL);
+		if (up_client_object)
+			g_object_add_weak_pointer (up_client_object, &up_client_object);
 	}
 	return UP_CLIENT (up_client_object);
 }
 
+/**
+ * up_client_new:
+ *
+ * Creates a new #UpClient object. If connecting to upowerd on D-Bus fails,
+ * this returns %NULL and prints out a warning with the error message.
+ * Consider using up_client_new_full() instead which allows you to handle errors
+ * and cancelling long operations yourself.
+ *
+ * Return value: a new UpClient object, or %NULL on failure.
+ *
+ * Since: 0.9.0
+ **/
+UpClient *
+up_client_new (void)
+{
+	GError *error = NULL;
+	UpClient *client;
+	client = up_client_new_full (NULL, &error);
+	if (client == NULL) {
+		g_warning ("Couldn't connect to proxy: %s", error->message);
+		g_error_free (error);
+	}
+	return client;
+}
+
diff '--exclude=.git' -urN a/libupower-glib/up-client.h b/libupower-glib/up-client.h
--- a/libupower-glib/up-client.h	2017-02-25 22:47:24.010670394 -0500
+++ b/libupower-glib/up-client.h	2017-02-25 22:53:07.874190836 -0500
@@ -78,6 +78,7 @@
 /* general */
 GType		 up_client_get_type			(void);
 UpClient	*up_client_new				(void);
+UpClient	*up_client_new_full			(GCancellable *cancellable, GError **error);
 
 /* sync versions */
 UpDevice *	 up_client_get_display_device		(UpClient *client);
